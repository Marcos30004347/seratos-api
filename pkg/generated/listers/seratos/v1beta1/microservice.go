/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/Marcos30004347/seratos-api/pkg/apis/seratos/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MicroserviceLister helps list Microservices.
// All objects returned here must be treated as read-only.
type MicroserviceLister interface {
	// List lists all Microservices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Microservice, err error)
	// Microservices returns an object that can list and get Microservices.
	Microservices(namespace string) MicroserviceNamespaceLister
	MicroserviceListerExpansion
}

// microserviceLister implements the MicroserviceLister interface.
type microserviceLister struct {
	indexer cache.Indexer
}

// NewMicroserviceLister returns a new MicroserviceLister.
func NewMicroserviceLister(indexer cache.Indexer) MicroserviceLister {
	return &microserviceLister{indexer: indexer}
}

// List lists all Microservices in the indexer.
func (s *microserviceLister) List(selector labels.Selector) (ret []*v1beta1.Microservice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Microservice))
	})
	return ret, err
}

// Microservices returns an object that can list and get Microservices.
func (s *microserviceLister) Microservices(namespace string) MicroserviceNamespaceLister {
	return microserviceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MicroserviceNamespaceLister helps list and get Microservices.
// All objects returned here must be treated as read-only.
type MicroserviceNamespaceLister interface {
	// List lists all Microservices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Microservice, err error)
	// Get retrieves the Microservice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Microservice, error)
	MicroserviceNamespaceListerExpansion
}

// microserviceNamespaceLister implements the MicroserviceNamespaceLister
// interface.
type microserviceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Microservices in the indexer for a given namespace.
func (s microserviceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Microservice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Microservice))
	})
	return ret, err
}

// Get retrieves the Microservice from the indexer for a given namespace and name.
func (s microserviceNamespaceLister) Get(name string) (*v1beta1.Microservice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("microservice"), name)
	}
	return obj.(*v1beta1.Microservice), nil
}
