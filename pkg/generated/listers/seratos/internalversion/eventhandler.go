/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	seratos "github.com/Marcos30004347/seratos-api/pkg/apis/seratos"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventHandlerLister helps list EventHandlers.
// All objects returned here must be treated as read-only.
type EventHandlerLister interface {
	// List lists all EventHandlers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*seratos.EventHandler, err error)
	// EventHandlers returns an object that can list and get EventHandlers.
	EventHandlers(namespace string) EventHandlerNamespaceLister
	EventHandlerListerExpansion
}

// eventHandlerLister implements the EventHandlerLister interface.
type eventHandlerLister struct {
	indexer cache.Indexer
}

// NewEventHandlerLister returns a new EventHandlerLister.
func NewEventHandlerLister(indexer cache.Indexer) EventHandlerLister {
	return &eventHandlerLister{indexer: indexer}
}

// List lists all EventHandlers in the indexer.
func (s *eventHandlerLister) List(selector labels.Selector) (ret []*seratos.EventHandler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*seratos.EventHandler))
	})
	return ret, err
}

// EventHandlers returns an object that can list and get EventHandlers.
func (s *eventHandlerLister) EventHandlers(namespace string) EventHandlerNamespaceLister {
	return eventHandlerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventHandlerNamespaceLister helps list and get EventHandlers.
// All objects returned here must be treated as read-only.
type EventHandlerNamespaceLister interface {
	// List lists all EventHandlers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*seratos.EventHandler, err error)
	// Get retrieves the EventHandler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*seratos.EventHandler, error)
	EventHandlerNamespaceListerExpansion
}

// eventHandlerNamespaceLister implements the EventHandlerNamespaceLister
// interface.
type eventHandlerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventHandlers in the indexer for a given namespace.
func (s eventHandlerNamespaceLister) List(selector labels.Selector) (ret []*seratos.EventHandler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*seratos.EventHandler))
	})
	return ret, err
}

// Get retrieves the EventHandler from the indexer for a given namespace and name.
func (s eventHandlerNamespaceLister) Get(name string) (*seratos.EventHandler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(seratos.Resource("eventhandler"), name)
	}
	return obj.(*seratos.EventHandler), nil
}
