// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta1

import (
	unsafe "unsafe"

	seratos "github.com/Marcos30004347/seratos-api/pkg/apis/seratos"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Env)(nil), (*seratos.Env)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Env_To_seratos_Env(a.(*Env), b.(*seratos.Env), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.Env)(nil), (*Env)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_Env_To_v1beta1_Env(a.(*seratos.Env), b.(*Env), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Microservice)(nil), (*seratos.Microservice)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_Microservice_To_seratos_Microservice(a.(*Microservice), b.(*seratos.Microservice), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.Microservice)(nil), (*Microservice)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_Microservice_To_v1beta1_Microservice(a.(*seratos.Microservice), b.(*Microservice), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MicroserviceList)(nil), (*seratos.MicroserviceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MicroserviceList_To_seratos_MicroserviceList(a.(*MicroserviceList), b.(*seratos.MicroserviceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.MicroserviceList)(nil), (*MicroserviceList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_MicroserviceList_To_v1beta1_MicroserviceList(a.(*seratos.MicroserviceList), b.(*MicroserviceList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MicroserviceSecutiry)(nil), (*seratos.MicroserviceSecutiry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry(a.(*MicroserviceSecutiry), b.(*seratos.MicroserviceSecutiry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.MicroserviceSecutiry)(nil), (*MicroserviceSecutiry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry(a.(*seratos.MicroserviceSecutiry), b.(*MicroserviceSecutiry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MicroserviceSpec)(nil), (*seratos.MicroserviceSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec(a.(*MicroserviceSpec), b.(*seratos.MicroserviceSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.MicroserviceSpec)(nil), (*MicroserviceSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec(a.(*seratos.MicroserviceSpec), b.(*MicroserviceSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MicroserviceTopology)(nil), (*seratos.MicroserviceTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MicroserviceTopology_To_seratos_MicroserviceTopology(a.(*MicroserviceTopology), b.(*seratos.MicroserviceTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*seratos.MicroserviceTopology)(nil), (*MicroserviceTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_seratos_MicroserviceTopology_To_v1beta1_MicroserviceTopology(a.(*seratos.MicroserviceTopology), b.(*MicroserviceTopology), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_Env_To_seratos_Env(in *Env, out *seratos.Env, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_v1beta1_Env_To_seratos_Env is an autogenerated conversion function.
func Convert_v1beta1_Env_To_seratos_Env(in *Env, out *seratos.Env, s conversion.Scope) error {
	return autoConvert_v1beta1_Env_To_seratos_Env(in, out, s)
}

func autoConvert_seratos_Env_To_v1beta1_Env(in *seratos.Env, out *Env, s conversion.Scope) error {
	out.Name = in.Name
	out.Value = in.Value
	return nil
}

// Convert_seratos_Env_To_v1beta1_Env is an autogenerated conversion function.
func Convert_seratos_Env_To_v1beta1_Env(in *seratos.Env, out *Env, s conversion.Scope) error {
	return autoConvert_seratos_Env_To_v1beta1_Env(in, out, s)
}

func autoConvert_v1beta1_Microservice_To_seratos_Microservice(in *Microservice, out *seratos.Microservice, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_Microservice_To_seratos_Microservice is an autogenerated conversion function.
func Convert_v1beta1_Microservice_To_seratos_Microservice(in *Microservice, out *seratos.Microservice, s conversion.Scope) error {
	return autoConvert_v1beta1_Microservice_To_seratos_Microservice(in, out, s)
}

func autoConvert_seratos_Microservice_To_v1beta1_Microservice(in *seratos.Microservice, out *Microservice, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_seratos_Microservice_To_v1beta1_Microservice is an autogenerated conversion function.
func Convert_seratos_Microservice_To_v1beta1_Microservice(in *seratos.Microservice, out *Microservice, s conversion.Scope) error {
	return autoConvert_seratos_Microservice_To_v1beta1_Microservice(in, out, s)
}

func autoConvert_v1beta1_MicroserviceList_To_seratos_MicroserviceList(in *MicroserviceList, out *seratos.MicroserviceList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]seratos.Microservice)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1beta1_MicroserviceList_To_seratos_MicroserviceList is an autogenerated conversion function.
func Convert_v1beta1_MicroserviceList_To_seratos_MicroserviceList(in *MicroserviceList, out *seratos.MicroserviceList, s conversion.Scope) error {
	return autoConvert_v1beta1_MicroserviceList_To_seratos_MicroserviceList(in, out, s)
}

func autoConvert_seratos_MicroserviceList_To_v1beta1_MicroserviceList(in *seratos.MicroserviceList, out *MicroserviceList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Microservice)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_seratos_MicroserviceList_To_v1beta1_MicroserviceList is an autogenerated conversion function.
func Convert_seratos_MicroserviceList_To_v1beta1_MicroserviceList(in *seratos.MicroserviceList, out *MicroserviceList, s conversion.Scope) error {
	return autoConvert_seratos_MicroserviceList_To_v1beta1_MicroserviceList(in, out, s)
}

func autoConvert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry(in *MicroserviceSecutiry, out *seratos.MicroserviceSecutiry, s conversion.Scope) error {
	out.Policy = in.Policy
	out.Blocks = *(*[]string)(unsafe.Pointer(&in.Blocks))
	out.Allow = *(*[]string)(unsafe.Pointer(&in.Allow))
	return nil
}

// Convert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry is an autogenerated conversion function.
func Convert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry(in *MicroserviceSecutiry, out *seratos.MicroserviceSecutiry, s conversion.Scope) error {
	return autoConvert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry(in, out, s)
}

func autoConvert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry(in *seratos.MicroserviceSecutiry, out *MicroserviceSecutiry, s conversion.Scope) error {
	out.Policy = in.Policy
	out.Blocks = *(*[]string)(unsafe.Pointer(&in.Blocks))
	out.Allow = *(*[]string)(unsafe.Pointer(&in.Allow))
	return nil
}

// Convert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry is an autogenerated conversion function.
func Convert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry(in *seratos.MicroserviceSecutiry, out *MicroserviceSecutiry, s conversion.Scope) error {
	return autoConvert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry(in, out, s)
}

func autoConvert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec(in *MicroserviceSpec, out *seratos.MicroserviceSpec, s conversion.Scope) error {
	out.Container = in.Container
	out.Replicas = in.Replicas
	out.Env = *(*[]seratos.Env)(unsafe.Pointer(&in.Env))
	return nil
}

// Convert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec is an autogenerated conversion function.
func Convert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec(in *MicroserviceSpec, out *seratos.MicroserviceSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_MicroserviceSpec_To_seratos_MicroserviceSpec(in, out, s)
}

func autoConvert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec(in *seratos.MicroserviceSpec, out *MicroserviceSpec, s conversion.Scope) error {
	out.Container = in.Container
	out.Replicas = in.Replicas
	out.Env = *(*[]Env)(unsafe.Pointer(&in.Env))
	return nil
}

// Convert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec is an autogenerated conversion function.
func Convert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec(in *seratos.MicroserviceSpec, out *MicroserviceSpec, s conversion.Scope) error {
	return autoConvert_seratos_MicroserviceSpec_To_v1beta1_MicroserviceSpec(in, out, s)
}

func autoConvert_v1beta1_MicroserviceTopology_To_seratos_MicroserviceTopology(in *MicroserviceTopology, out *seratos.MicroserviceTopology, s conversion.Scope) error {
	out.Proxys = *(*[]seratos.MicroserviceProxy)(unsafe.Pointer(&in.Proxys))
	if err := Convert_v1beta1_MicroserviceSecutiry_To_seratos_MicroserviceSecutiry(&in.Secutiry, &out.Secutiry, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_MicroserviceTopology_To_seratos_MicroserviceTopology is an autogenerated conversion function.
func Convert_v1beta1_MicroserviceTopology_To_seratos_MicroserviceTopology(in *MicroserviceTopology, out *seratos.MicroserviceTopology, s conversion.Scope) error {
	return autoConvert_v1beta1_MicroserviceTopology_To_seratos_MicroserviceTopology(in, out, s)
}

func autoConvert_seratos_MicroserviceTopology_To_v1beta1_MicroserviceTopology(in *seratos.MicroserviceTopology, out *MicroserviceTopology, s conversion.Scope) error {
	out.Proxys = *(*[]Proxy)(unsafe.Pointer(&in.Proxys))
	if err := Convert_seratos_MicroserviceSecutiry_To_v1beta1_MicroserviceSecutiry(&in.Secutiry, &out.Secutiry, s); err != nil {
		return err
	}
	return nil
}

// Convert_seratos_MicroserviceTopology_To_v1beta1_MicroserviceTopology is an autogenerated conversion function.
func Convert_seratos_MicroserviceTopology_To_v1beta1_MicroserviceTopology(in *seratos.MicroserviceTopology, out *MicroserviceTopology, s conversion.Scope) error {
	return autoConvert_seratos_MicroserviceTopology_To_v1beta1_MicroserviceTopology(in, out, s)
}
